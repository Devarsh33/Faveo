name: Ticket Tagging Automation

on:
  workflow_dispatch:
    inputs:
      title:
        description: "Ticket Title"
        required: true
      body:
        description: "Ticket Body"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Cache Virtual Environment
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-cache-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-cache-

      - name: Cache Pip Downloads
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-cache-

      - name: Setup Virtual Environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure Model Exists
        run: |
          if [ ! -f "models/flan_t5_base/tokenizer_config.json" ]; then
            echo "Model not found, downloading..."
            mkdir -p models/flan_t5_base
            huggingface-cli download google/flan-t5-base --local-dir models/flan_t5_base
          fi

      - name: Cache Model Folder
        uses: actions/cache@v3
        with:
          path: models/flan_t5_base
          key: model-cache-${{ runner.os }}
          restore-keys: |
            model-cache-

      - name: Debug Cached Model Files
        run: ls -lah models/flan_t5_base || echo "Model folder is empty!"

      - name: Run Ticket Analyzer
        run: |
          source venv/bin/activate
          TITLE=$(echo '${{ github.event.inputs.title }}' | jq -Rs .)
          BODY=$(echo '${{ github.event.inputs.body }}' | jq -Rs .)
          JSON_OUTPUT=$(echo '{}' | jq --arg title "$TITLE" --arg body "$BODY" '.title=$title | .body=$body' | python src/tag.py)
          echo "Generated JSON Output:"
          echo "$JSON_OUTPUT"
          
          echo "JSON_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$JSON_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Output to Tines
        run: |
          curl -X POST "https://spring-brook-3876.tines.com/webhook/34b344cf8982c2fdc147aefcad15560c/67264f4dc3607c57c7e82cc2a0bc2c6f" \
               -H "Content-Type: application/json" \
               -d "$JSON_OUTPUT"

      - name: Verify Cached Model After Job
        run: ls -lah models/flan_t5_base
